{
  "articles": [
    {
      "path": "blog.html",
      "title": "Workshops",
      "author": [],
      "contents": "\r\n\r\n\r\n\r\n",
      "last_modified": "2023-01-24T21:32:53+01:00"
    },
    {
      "path": "index.html",
      "title": "About us",
      "author": [],
      "contents": "\r\nWhat are the NSC-R Workshops?\r\nThe NSC-R Workshops is a series of weekly one-hour\r\nonline instructional sessions to support participants in developing\r\ntheir data science skills in R, and to promote open science principles.\r\nThe NSC-R workshop meetings are organized by a team affliated with the\r\nNetherlands Institute for the Study of Crime and Law Enforcement (NSCR), but they are open to\r\neveryone, regardless of affiliation or skill level.\r\nThe NSC-R Workshop Team\r\nThe NSC-R Workshop Team coordinates the NSC-R Workshops. They discuss\r\npotential topics, invite presenters, plan the meetings and send\r\ninvitations. Currently the team includes Wim Bernasco, Franziska\r\nYasrebi-de Kom, Sam Langton, Asier Moneva and Alex Trinidad.\r\nContact Us and Get involved\r\nIf you want your e-mail address on our mailing list, please send an\r\ne-mail to Wim Bernasco at wbernasco@nscr.nl.\r\nIf you have suggestions for workshop topics, or are interested in\r\npresenting one, please send a message to Wim Bernasco (wbernasco@nscr.nl),\r\nFranziska Yasrebi-de Kom (FYasrebi@nscr.nl), Sam Langton (slangton@nscr.nl),\r\nAsier Moneva (amoneva@nscr.nl) or Alex Trinidad (atrinidad@nscr.nl).\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
      "last_modified": "2023-01-24T21:32:54+01:00"
    },
    {
      "path": "other.html",
      "title": "Extra material",
      "author": [],
      "contents": "\r\n\r\n\r\n\r\n",
      "last_modified": "2023-01-24T21:32:55+01:00"
    },
    {
      "path": "teaching.html",
      "title": "Teaching",
      "author": [],
      "contents": "\r\nWorkshop 1:\r\nData Skills for Reproducible Science\r\nSee\r\nCommands\r\nTyping commands in the R Studio concole (bottom left window). Note\r\nthat on a line in the editor, anything after is automagically green and\r\ntreated as comment, not code (like ’*’ in Stata and SPSS)\r\n\r\n\r\nrm(list=ls())\r\n\r\n1 + 1\r\n\r\n[1] 2\r\n\r\n1 + 2 + 3\r\n\r\n[1] 6\r\n\r\n1 +\r\n  2\r\n\r\n[1] 3\r\n\r\nStrings\r\n\r\n\r\n\"Good morning\"\r\n\r\n[1] \"Good morning\"\r\n\r\nSingle quotes can be used as well, but not prefered\r\n\r\n\r\n'Good Morning'\r\n\r\n[1] \"Good Morning\"\r\n\r\nQuotes\r\nUse single quotes if the string must cntain double quotes, or vice\r\nversa\r\n\r\n\r\n\"'Good morning', she said\"\r\n\r\n[1] \"'Good morning', she said\"\r\n\r\n'\"Good morning\", he replied'\r\n\r\n[1] \"\\\"Good morning\\\", he replied\"\r\n\r\nCat\r\nThe command cat prints to the screen whatever is between brackets\r\n\r\n\r\ncat(\"'Good morning', she said\")\r\n\r\n'Good morning', she said\r\n\r\ncat('\"Good morning\", he replied')\r\n\r\n\"Good morning\", he replied\r\n\r\nVariables\r\nWe start with variables that represent just one number (you may think\r\nof an SPSSS or Stata variable in a dataset with N=1)\r\nUse the assignment operator ‘<-’\r\nR stores the number in the variable ‘variable1’\r\n\r\n\r\nvariable1 <- 5\r\nvariable1\r\n\r\n[1] 5\r\n\r\nalternatively (seldom very useful)\r\n\r\n\r\nassign(\"variable2\", 7)  # note the variable name is between quotes hre\r\nvariable2\r\n\r\n[1] 7\r\n\r\nWe can use the variable in subsequent calculations\r\n\r\n\r\nvariable1 * variable2\r\n\r\n[1] 35\r\n\r\n# and assign the result to another variable\r\nvariable3 <- variable1 + variable2\r\n\r\n\r\nJust as in SPSS, you can overwrite the original value\r\n\r\n\r\nvariable1 <- variable1 * variable2\r\nvariable1\r\n\r\n[1] 35\r\n\r\nA variable does not need to be a single number, it can be a vector\r\nlike our variables in Stata and SPSS\r\n\r\n\r\nmyvariable <- c(2,3,5,7,11,13)\r\nmyvariable\r\n\r\n[1]  2  3  5  7 11 13\r\n\r\nJust as in Stata or SPSS, assignment of values to variables is\r\nstatic. Here is an example from the online course:\r\n\r\n\r\nthis_year <- 2019\r\nmy_birth_year <- 1976\r\nmy_age <- this_year - my_birth_year\r\nthis_year <- 2020\r\n# your age is not updated automatically!\r\n\r\n\r\nLook at the upper right panel (‘Global Environment’)\r\nFunctions\r\nAlmost everything is R works with functions. hey are small programs\r\nthat you feed with something and that return something else.\r\nThree numbers go in (the functionarguments), 10 come out (the value of\r\nthe function)\r\n\r\n\r\nrnorm(n=10, mean=0, sd=1)\r\n\r\n [1]  0.76656872  1.26181141 -0.42663247  0.04350106 -1.21315238\r\n [6] -2.04499864  1.80180076 -0.44061917 -1.46230871 -1.20712544\r\n\r\nYou often use a function in a function. sum() is also a function\r\n\r\n\r\nsum(rnorm(n=10, mean=0, sd=1))\r\n\r\n[1] -5.322349\r\n\r\nGetting help is easy for beginners, but understanding it is not\r\nalways easy\r\n\r\n\r\nhelp(\"rnorm\")\r\n?rnorm\r\n\r\n\r\nPackages\r\nThe power of R is in the packages. There are hundreds of them, for\r\nspecific tasks. It can be overwhelming, esp. if multiple packages offer\r\nsimilar possibilities (i.e. inter-rater reliability assessment)\r\nYou can do it by commandline (take away #)\r\n\r\n\r\n# install.packages(\"ggExtra\")\r\n\r\n\r\nOr via menu (Tools-Install packages) or pane Packages (Install).\r\nAfter installing: load package (one per session, typically at the top of\r\nyur script/syntax)\r\n\r\n\r\nlibrary(ggExtra)\r\n\r\n\r\nRead section 1.6.1 carefully. It is about how to organize your\r\nscript\r\n\r\n\r\n\r\n",
      "last_modified": "2023-01-24T21:32:56+01:00"
    }
  ],
  "collections": ["posts/posts.json"]
}
