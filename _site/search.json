{
  "articles": [
    {
      "path": "blog.html",
      "title": "Workshops",
      "author": [],
      "contents": "\r\n\r\n\r\n\r\n",
      "last_modified": "2023-06-21T14:32:52+02:00"
    },
    {
      "path": "index.html",
      "title": "About us",
      "author": [],
      "contents": "\r\n\r\n\r\n\r\nWhat are the NSC-R Workshops?\r\nThe NSC-R Workshops is a series of one-hour online instructional sessions to support participants in developing their data science skills in R, and to promote open science principles. The NSC-R workshop meetings are organized by a team affiliated with the Netherlands Institute for the Study of Crime and Law Enforcement (NSCR), but they are open to everyone, regardless of affiliation or skill level.\r\nThere are workshops on specific topics (e.g. network analysis, missing values) and Tidy Tuesday workshops that cover more basic skills and materials. A collection of these latter workshop materials have been brought together by Harrie Jonkman in a single document that you can find here.\r\nThe NSC-R Workshop Team\r\nThe NSC-R Workshop Team coordinates the NSC-R Workshops. They discuss potential topics, invite presenters, plan the meetings and send invitations. Currently the team includes Abby Onencan, Alex Trinidad, Asier Moneva, Danielle van Westbroek-Stibbe, Sam Langton and Wim Bernasco.\r\nContact Us and Get involved\r\nIf you want your e-mail address on (of off) our mailing list, please send an e-mail to Wim Bernasco at wbernasco@nscr.nl.\r\nIf you have suggestions for workshop topics, or are interested in presenting one, please send a message to\r\nWim Bernasco (wbernasco@nscr.nl),\r\nSam Langton (slangton@nscr.nl),\r\nAsier Moneva (amoneva@nscr.nl),\r\nAbby Onencan (onencan@law.eur.nl),\r\nAlex Trinidad (atrinidad@nscr.nl), or\r\nDanielle van Westbroek-Stibbe (DStibbe@nscr.nl).\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
      "last_modified": "2023-06-21T14:32:53+02:00"
    },
    {
      "path": "other.html",
      "title": "Extra material",
      "author": [],
      "contents": "\r\n\r\n\r\n\r\n",
      "last_modified": "2023-06-21T14:32:53+02:00"
    },
    {
      "path": "teaching.html",
      "title": "Teaching",
      "author": [],
      "contents": "\r\nWorkshop 1: Data Skills for Reproducible Science\r\nSee\r\nCommands\r\nTyping commands in the R Studio concole (bottom left window). Note that on a line in the editor, anything after is automagically green and treated as comment, not code (like ’*’ in Stata and SPSS)\r\n\r\n\r\nrm(list=ls())\r\n\r\n1 + 1\r\n\r\n[1] 2\r\n\r\n1 + 2 + 3\r\n\r\n[1] 6\r\n\r\n1 +\r\n  2\r\n\r\n[1] 3\r\n\r\nStrings\r\n\r\n\r\n\"Good morning\"\r\n\r\n[1] \"Good morning\"\r\n\r\nSingle quotes can be used as well, but not prefered\r\n\r\n\r\n'Good Morning'\r\n\r\n[1] \"Good Morning\"\r\n\r\nQuotes\r\nUse single quotes if the string must cntain double quotes, or vice versa\r\n\r\n\r\n\"'Good morning', she said\"\r\n\r\n[1] \"'Good morning', she said\"\r\n\r\n'\"Good morning\", he replied'\r\n\r\n[1] \"\\\"Good morning\\\", he replied\"\r\n\r\nCat\r\nThe command cat prints to the screen whatever is between brackets\r\n\r\n\r\ncat(\"'Good morning', she said\")\r\n\r\n'Good morning', she said\r\n\r\ncat('\"Good morning\", he replied')\r\n\r\n\"Good morning\", he replied\r\n\r\nVariables\r\nWe start with variables that represent just one number (you may think of an SPSSS or Stata variable in a dataset with N=1)\r\nUse the assignment operator ‘<-’\r\nR stores the number in the variable ‘variable1’\r\n\r\n\r\nvariable1 <- 5\r\nvariable1\r\n\r\n[1] 5\r\n\r\nalternatively (seldom very useful)\r\n\r\n\r\nassign(\"variable2\", 7)  # note the variable name is between quotes hre\r\nvariable2\r\n\r\n[1] 7\r\n\r\nWe can use the variable in subsequent calculations\r\n\r\n\r\nvariable1 * variable2\r\n\r\n[1] 35\r\n\r\n# and assign the result to another variable\r\nvariable3 <- variable1 + variable2\r\n\r\n\r\nJust as in SPSS, you can overwrite the original value\r\n\r\n\r\nvariable1 <- variable1 * variable2\r\nvariable1\r\n\r\n[1] 35\r\n\r\nA variable does not need to be a single number, it can be a vector like our variables in Stata and SPSS\r\n\r\n\r\nmyvariable <- c(2,3,5,7,11,13)\r\nmyvariable\r\n\r\n[1]  2  3  5  7 11 13\r\n\r\nJust as in Stata or SPSS, assignment of values to variables is static.\r\nHere is an example from the online course:\r\n\r\n\r\nthis_year <- 2019\r\nmy_birth_year <- 1976\r\nmy_age <- this_year - my_birth_year\r\nthis_year <- 2020\r\n# your age is not updated automatically!\r\n\r\n\r\nLook at the upper right panel (‘Global Environment’)\r\nFunctions\r\nAlmost everything is R works with functions. hey are small programs that you feed with something and that return something else.\r\nThree numbers go in (the functionarguments), 10 come out (the value of the function)\r\n\r\n\r\nrnorm(n=10, mean=0, sd=1)\r\n\r\n [1] -2.0249237 -0.2538502  1.5211811 -1.4519873  1.9845956  0.8715331\r\n [7] -2.6110705  1.2129107 -2.6893182  0.9138430\r\n\r\nYou often use a function in a function. sum() is also a function\r\n\r\n\r\nsum(rnorm(n=10, mean=0, sd=1))\r\n\r\n[1] -2.212731\r\n\r\nGetting help is easy for beginners, but understanding it is not always easy\r\n\r\n\r\nhelp(\"rnorm\")\r\n?rnorm\r\n\r\n\r\nPackages\r\nThe power of R is in the packages. There are hundreds of them, for specific tasks. It can be overwhelming, esp. if multiple packages offer similar possibilities (i.e. inter-rater reliability assessment)\r\nYou can do it by commandline (take away #)\r\n\r\n\r\n# install.packages(\"ggExtra\")\r\n\r\n\r\nOr via menu (Tools-Install packages) or pane Packages (Install).\r\nAfter installing: load package (one per session, typically at the top of yur script/syntax)\r\n\r\n\r\nlibrary(ggExtra)\r\n\r\n\r\nRead section 1.6.1 carefully. It is about how to organize your script\r\n\r\n\r\n\r\n",
      "last_modified": "2023-06-21T14:32:54+02:00"
    }
  ],
  "collections": ["posts/posts.json"]
}
